# Multi-MCP Deployment with NGINX Proxy - Production Configuration
# Refactored structure supporting multiple MCP servers behind NGINX
# Each MCP server is in its own subdirectory under Servers/

networks:
  # Internal network for MCP services
  mcp-internal:
    driver: bridge
    internal: false  # Allow external access for OAuth callbacks and Let's Encrypt
    ipam:
      config:
        - subnet: 172.20.0.0/16
  
  # External web traffic network
  web:
    driver: bridge
    external: false
    ipam:
      config:
        - subnet: 172.21.0.0/16

services:
  # Google Calendar MCP Server
  calendar-mcp:
    build: ./Servers/GoogleCalendarMCP
    container_name: calendar-mcp
    restart: unless-stopped
    
    # Load centralized environment configuration
    env_file:
      - .env
    
    # Internal network only - no port exposure to host except OAuth
    networks:
      - mcp-internal
    
    # Expose OAuth ports for authentication (3500-3505)
    ports:
      - "3500:3500"
      - "3501:3501"
      - "3502:3502"
      - "3503:3503"
      - "3504:3504"
      - "3505:3505"
    
    # Environment configuration
    environment:
      - TRANSPORT=${MCP_TRANSPORT:-http}
      - HOST=${GOOGLE_MCP_HOST:-0.0.0.0}
      - PORT=${GOOGLE_MCP_PORT:-3000}
      - NODE_ENV=${NODE_ENV:-production}
      - GOOGLE_OAUTH_CREDENTIALS=${GOOGLE_OAUTH_CREDENTIALS:-/app/gcp-oauth.keys.json}
      - GOOGLE_ACCOUNT_MODE=${GOOGLE_ACCOUNT_MODE:-normal}
    
    # OAuth credentials and token storage
    volumes:
      - ./gcp-oauth.keys.json:/app/gcp-oauth.keys.json:ro
      - calendar-tokens:/home/nodejs/.config/google-calendar-mcp
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "1.0"
        reservations:
          memory: 256M
          cpus: "0.5"
    
    # Enhanced Security Configuration
    security_opt:
      - no-new-privileges:true
      - apparmor:unconfined
    
    # Read-only root filesystem for security
    read_only: true
    
    # Drop all capabilities and add only necessary ones
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    
    # Temporary filesystems for writes
    tmpfs:
      - /tmp:rw,noexec,nosuid,nodev,size=100m
      - /app/logs:rw,noexec,nosuid,nodev,size=50m
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://0.0.0.0:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Gmail MCP Server
  gmail-mcp:
    build: ./Servers/GmailMCP
    container_name: gmail-mcp
    restart: unless-stopped
    
    # Load centralized environment configuration
    env_file:
      - .env
    
    # Internal network only - no port exposure to host except OAuth
    networks:
      - mcp-internal
    
    # Expose OAuth ports for authentication (3500-3505)
    ports:
      - "3500:3500"
      - "3501:3501"
      - "3502:3502"
      - "3503:3503"
      - "3504:3504"
      - "3505:3505"
    
    # Environment configuration
    environment:
      - TRANSPORT=${MCP_TRANSPORT:-http}
      - HOST=${GMAIL_MCP_HOST:-0.0.0.0}
      - PORT=${GMAIL_MCP_PORT:-3001}
      - NODE_ENV=${NODE_ENV:-production}
      - GMAIL_OAUTH_CREDENTIALS=${GMAIL_OAUTH_CREDENTIALS:-/app/gcp-oauth.keys.json}
      - GOOGLE_OAUTH_CREDENTIALS=${GOOGLE_OAUTH_CREDENTIALS:-/app/gcp-oauth.keys.json}
      - GOOGLE_ACCOUNT_MODE=${GOOGLE_ACCOUNT_MODE:-normal}
    
    # OAuth credentials and token storage
    volumes:
      - ./gcp-oauth.keys.json:/app/gcp-oauth.keys.json:ro
      - gmail-tokens:/home/nodejs/.config/gmail-mcp
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "1.0"
        reservations:
          memory: 256M
          cpus: "0.5"
    
    # Enhanced Security Configuration
    security_opt:
      - no-new-privileges:true
      - apparmor:unconfined
    
    # Read-only root filesystem for security
    read_only: true
    
    # Drop all capabilities and add only necessary ones
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    
    # Temporary filesystems for writes
    tmpfs:
      - /tmp:rw,noexec,nosuid,nodev,size=100m
      - /app/logs:rw,noexec,nosuid,nodev,size=50m
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://0.0.0.0:3001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # TopDesk MCP Server
  topdesk-mcp:
    build: ./Servers/TopDeskMCP
    container_name: topdesk-mcp
    restart: unless-stopped
    
    # Load centralized environment configuration
    env_file:
      - .env
    
    # Internal network only
    networks:
      - mcp-internal
    
    # Environment configuration
    environment:
      - TOPDESK_MCP_TRANSPORT=${TOPDESK_MCP_TRANSPORT:-streamable-http}
      - TOPDESK_MCP_HOST=${TOPDESK_MCP_HOST:-0.0.0.0}
      - TOPDESK_MCP_PORT=${TOPDESK_MCP_PORT:-3030}
      - TOPDESK_URL=${TOPDESK_URL:-https://example.topdesk.net}
      - TOPDESK_USERNAME=api_aipilots
      - TOPDESK_PASSWORD=7w7j6-ytlqt-wpcbz-ywu6v-remw7
      - TOPDESK_API_TOKEN=${TOPDESK_API_TOKEN:-example_token}
    
    # Data storage
    volumes:
      - topdesk-data:/app/data
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "1.0"
        reservations:
          memory: 256M
          cpus: "0.5"
    
    # Enhanced Security Configuration
    security_opt:
      - no-new-privileges:true
      - apparmor:unconfined
    
    # Read-only root filesystem for security
    read_only: true
    
    # Drop all capabilities and add only necessary ones
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    
    # Temporary filesystems for writes
    tmpfs:
      - /tmp:rw,noexec,nosuid,nodev,size=100m
      - /app/logs:rw,noexec,nosuid,nodev,size=50m
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep -v grep | grep 'topdesk_mcp.main' > /dev/null || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # DuckDNS IP updater service
  duckdns-updater:
    build:
      context: .
      dockerfile: Dockerfile.duckdns
    container_name: duckdns-updater
    restart: unless-stopped
    read_only: true
    tmpfs:
      - /tmp
      - /var/tmp
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
      - apparmor:unconfined
    
    # Load centralized environment configuration
    env_file:
      - .env
    
    environment:
      - DUCKDNS_DOMAIN=${DUCKDNS_DOMAIN:-matrosmcp}
      - DUCKDNS_TOKEN=${DUCKDNS_TOKEN:-6fb5210e-71c6-4327-bbf9-af8283a08b37}
      - TZ=${TZ:-Europe/Amsterdam}
    
    networks:
      - web
    
    volumes:
      - duckdns-logs:/var/log:rw
    
    # Resource limits (very lightweight)
    deploy:
      resources:
        limits:
          memory: 32M
          cpus: "0.1"
        reservations:
          memory: 16M
          cpus: "0.05"
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pgrep crond > /dev/null || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 10s

  # SSL Certificate Renewal Service
  ssl-renewer:
    build: ./nginx/ssl-renewer
    container_name: ssl-renewer
    restart: unless-stopped
    read_only: true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=100m
      - /var/tmp:rw,noexec,nosuid,size=50m
      - /var/log/ssl-renewal:rw,noexec,nosuid,size=10m
    cap_drop:
      - ALL
    cap_add:
      - DAC_OVERRIDE  # Required for Let's Encrypt file operations
      - CHOWN        # Required for certificate file ownership
    security_opt:
      - no-new-privileges:true
      - apparmor:unconfined
    
    # Load centralized environment configuration
    env_file:
      - .env
    
    environment:
      - DOMAIN=${DOMAIN:-matrosmcp.duckdns.org}
      - TZ=${TZ:-Europe/Amsterdam}
      - COMPOSE_PROJECT_PATH=/compose
      - NGINX_CONTAINER=nginx-proxy
      - CERT_EXPIRY_DAYS=${CERT_EXPIRY_DAYS:-30}
    
    networks:
      - web
    
    volumes:
      # Let's Encrypt certificates (read-write for renewal)
      - /etc/letsencrypt:/etc/letsencrypt:rw
      # Docker socket for container restart capability
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Docker compose file for service management
      - ./docker-compose.yml:/compose/docker-compose.yml:ro
    
    # Resource limits (lightweight)
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: "0.5"
        reservations:
          memory: 64M
          cpus: "0.1"
    
    depends_on:
      - nginx-proxy

  # NGINX Reverse Proxy
  # Routes requests to all MCP servers
  nginx-proxy:
    image: nginx:alpine
    container_name: nginx-proxy
    restart: unless-stopped
    
    networks:
      - mcp-internal
      - web
    
    # Expose only HTTPS to the world
    ports:
      - "80:80"   # For Let's Encrypt challenges
      - "443:443" # HTTPS
    
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro  # Let's Encrypt certificates
      - /var/www/certbot:/var/www/certbot:ro  # Let's Encrypt webroot
      - ./nginx/auth:/etc/nginx/auth:ro
      - nginx-logs:/var/log/nginx
    
    depends_on:
      calendar-mcp:
        condition: service_healthy
      gmail-mcp:
        condition: service_healthy
      topdesk-mcp:
        condition: service_healthy
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.5"
        reservations:
          memory: 128M
          cpus: "0.25"
    
    # Enhanced Security Configuration
    security_opt:
      - no-new-privileges:true
      - apparmor:unconfined
    
    # Read-only root filesystem
    read_only: true
    
    # Drop all capabilities and add only necessary ones
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
      - CHOWN
      - DAC_OVERRIDE
      - SETGID
      - SETUID
    
    # Temporary filesystems for NGINX runtime
    tmpfs:
      - /var/cache/nginx:rw,noexec,nosuid,nodev,size=50m
      - /var/run:rw,noexec,nosuid,nodev,size=10m
      - /tmp:rw,noexec,nosuid,nodev,size=20m
    
    # Health check for NGINX
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

volumes:
  calendar-tokens:
    driver: local
  gmail-tokens:
    driver: local
  topdesk-data:
    driver: local
  nginx-logs:
    driver: local
  duckdns-logs:
    driver: local