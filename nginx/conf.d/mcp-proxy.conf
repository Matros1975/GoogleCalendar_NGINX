# Upstream for MCP service
upstream mcp_backend {
    server calendar-mcp-prod:3000;
    keepalive 32;
}

# Authentication subrequest endpoint
server {
    listen 8080;
    server_name localhost;
    
    # Internal authentication endpoint
    location = /auth {
        internal;
        proxy_pass http://mcp_backend/auth/validate;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header X-Original-Method $request_method;
        proxy_set_header Authorization $http_authorization;
    }
}

# Main server configuration
server {
    listen 80;
    listen 443 ssl http2;
    server_name your-domain.com;  # Replace with your actual domain

    # SSL Configuration (replace with your certificates)
    ssl_certificate /etc/nginx/ssl/cert.pem;
    ssl_certificate_key /etc/nginx/ssl/key.pem;
    
    # SSL Security
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Security headers specific to this server
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    
    # Redirect HTTP to HTTPS
    if ($scheme != "https") {
        return 301 https://$server_name$request_uri;
    }

    # Rate limiting
    limit_req zone=api burst=20 nodelay;

    # Health check endpoint (no auth required)
    location /health {
        proxy_pass http://mcp_backend/health;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Cache health checks
        expires 30s;
        add_header Cache-Control "public, no-transform";
    }

    # OAuth callback endpoints (no bearer token required, but rate limited)
    location ~ ^/oauth/(callback|authorize) {
        limit_req zone=auth burst=10 nodelay;
        
        proxy_pass http://mcp_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Security for OAuth endpoints
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
    }

    # MCP endpoints - require bearer token authentication
    location / {
        # Authentication subrequest
        auth_request /auth;
        
        # Set variables from auth response
        auth_request_set $auth_result $upstream_http_x_auth_result;
        auth_request_set $bearer_valid $upstream_http_x_bearer_valid;
        
        # Forward to MCP service
        proxy_pass http://mcp_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Authorization $http_authorization;
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Buffer settings for MCP streaming
        proxy_buffering off;
        proxy_cache off;
    }

    # Error pages
    error_page 401 = @error401;
    error_page 403 = @error403;
    error_page 500 502 503 504 = @error50x;

    location @error401 {
        return 401 '{"error":"Unauthorized","message":"Valid bearer token required"}';
        add_header Content-Type application/json always;
    }

    location @error403 {
        return 403 '{"error":"Forbidden","message":"Access denied"}';
        add_header Content-Type application/json always;
    }

    location @error50x {
        return 500 '{"error":"Internal Server Error","message":"MCP service unavailable"}';
        add_header Content-Type application/json always;
    }
}