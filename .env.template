# ============================================================================
# Centralized Environment Configuration for Multi-MCP Setup
# ============================================================================
# Copy this file to .env and fill in your actual values
# DO NOT commit the .env file - it contains sensitive credentials

# ============================================================================
# SHARED CONFIGURATION
# ============================================================================
NODE_ENV=production
LOG_LEVEL=info

# ============================================================================
# NGINX PROXY AUTHENTICATION
# ============================================================================
# Generate secure bearer token using: openssl rand -hex 32
MCP_BEARER_TOKEN=your-secure-bearer-token-here

# Optional: Additional bearer tokens (comma-separated)
BEARER_TOKENS=your-secure-token-1,your-secure-token-2

# ============================================================================
# GOOGLE CALENDAR MCP CONFIGURATION
# ============================================================================
# Following AGENTS.md guidelines for GoogleCalendarMCP

# Transport Configuration
MCP_TRANSPORT=http
GOOGLE_MCP_HOST=0.0.0.0
GOOGLE_MCP_PORT=3000

# Google OAuth Credentials (REQUIRED)
# Path to your Google OAuth credentials file
# For Docker: Use /app/gcp-oauth.keys.json (mounted from ./gcp-oauth.keys.json)
# For local dev: Use ./gcp-oauth.keys.json or custom path
GOOGLE_OAUTH_CREDENTIALS=/app/gcp-oauth.keys.json

# Google Account Mode
# Set to "test" for testing with separate test calendar, or "normal" for production
GOOGLE_ACCOUNT_MODE=normal

# OAuth Token Storage (Optional)
# Default: ~/.config/google-calendar-mcp/tokens.json
# For Docker: /home/nodejs/.config/google-calendar-mcp
# GOOGLE_CALENDAR_MCP_TOKEN_PATH=/custom/path/to/tokens

# Test Configuration (for development/testing only)
# TEST_CALENDAR_ID=your-test-calendar@gmail.com
# SEND_UPDATES=none
# AUTO_CLEANUP=true

# ============================================================================
# TOPDESK MCP CONFIGURATION
# ============================================================================
# TopDesk API Configuration
TOPDESK_URL=https://yourcompany.topdesk.net
TOPDESK_USERNAME=your_username
TOPDESK_PASSWORD=your_api_token

# TopDesk MCP Transport Configuration
TOPDESK_MCP_TRANSPORT=streamable-http
TOPDESK_MCP_HOST=0.0.0.0
TOPDESK_MCP_PORT=3030

# Optional: Document Conversion Configuration
# DOCLING_ADDRESS=http://localhost:8080
# DOCLING_API_KEY=your_docling_api_key
# OPENAI_API_BASE=https://api.openai.com
# OPENAI_API_KEY=your_openai_api_key
# OPENAI_MODEL_NAME=gpt-4.1
# SSL_VERIFY=true

# ============================================================================
# DUCKDNS CONFIGURATION (Optional)
# ============================================================================
# DuckDNS domain and token for dynamic DNS updates
# DUCKDNS_DOMAIN=yourdomain
# DUCKDNS_TOKEN=your-duckdns-token

# ============================================================================
# SSL CONFIGURATION (Optional)
# ============================================================================
# Domain name for SSL certificate
# DOMAIN=yourdomain.duckdns.org
# TZ=Europe/Amsterdam
# CERT_EXPIRY_DAYS=30

# ============================================================================
# DEVELOPMENT/TESTING CONFIGURATION (Optional)
# ============================================================================
# Anthropic API config (used only for integration testing)
# ANTHROPIC_MODEL=claude-3-5-haiku-20241022
# CLAUDE_API_KEY=your_api_key

# OpenAI API config (used only for integration testing)
# OPENAI_API_KEY=your_api_key
# OPENAI_MODEL=gpt-4.1

# ============================================================================
# SECURITY NOTES
# ============================================================================
# 1. Never commit this file with actual credentials
# 2. Use strong, randomly generated tokens for MCP_BEARER_TOKEN
# 3. Keep OAuth credentials file (gcp-oauth.keys.json) secure
# 4. OAuth tokens are stored in ~/.config/google-calendar-mcp/tokens.json
# 5. For Docker deployments, mount credentials as read-only volumes
